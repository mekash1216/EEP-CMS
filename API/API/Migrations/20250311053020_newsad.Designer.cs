// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20250311053020_newsad")]
    partial class newsad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Model.AccidentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CauseOfInjury")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InjuryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InjuryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PreventiveAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AccidentReports");
                });

            modelBuilder.Entity("API.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExaminerId")
                        .HasColumnType("int");

                    b.Property<string>("PatientCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegExaminerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("API.Model.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("DiastolicPressure")
                        .HasColumnType("real");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientAge")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<float>("PulseRate")
                        .HasColumnType("real");

                    b.Property<float>("RespiratoryRate")
                        .HasColumnType("real");

                    b.Property<float>("SpO2")
                        .HasColumnType("real");

                    b.Property<float>("SystolicPressure")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("Triage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("API.Model.Bacteriology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AFB")
                        .HasColumnType("bit");

                    b.Property<bool>("GramStrin")
                        .HasColumnType("bit");

                    b.Property<bool>("KOH")
                        .HasColumnType("bit");

                    b.Property<bool>("WetSmear")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Bacteriologies");
                });

            modelBuilder.Entity("API.Model.Biochemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AMYLASE")
                        .HasColumnType("bit");

                    b.Property<bool>("Albumin")
                        .HasColumnType("bit");

                    b.Property<bool>("AlkaPho")
                        .HasColumnType("bit");

                    b.Property<bool>("BUN")
                        .HasColumnType("bit");

                    b.Property<bool>("Creatinine")
                        .HasColumnType("bit");

                    b.Property<bool>("DBilirubin")
                        .HasColumnType("bit");

                    b.Property<bool>("FBS")
                        .HasColumnType("bit");

                    b.Property<bool>("GGT")
                        .HasColumnType("bit");

                    b.Property<bool>("HDL")
                        .HasColumnType("bit");

                    b.Property<bool>("LDH")
                        .HasColumnType("bit");

                    b.Property<bool>("LDL")
                        .HasColumnType("bit");

                    b.Property<bool>("Lipase")
                        .HasColumnType("bit");

                    b.Property<bool>("RBS")
                        .HasColumnType("bit");

                    b.Property<bool>("SGOT")
                        .HasColumnType("bit");

                    b.Property<bool>("SGPT")
                        .HasColumnType("bit");

                    b.Property<bool>("TBilirubin")
                        .HasColumnType("bit");

                    b.Property<bool>("TCholesterol")
                        .HasColumnType("bit");

                    b.Property<bool>("TProtein")
                        .HasColumnType("bit");

                    b.Property<bool>("Triglyceride")
                        .HasColumnType("bit");

                    b.Property<bool>("UricAcid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Biochemistries");
                });

            modelBuilder.Entity("API.Model.CancerMarker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("AFP")
                        .HasColumnType("bit");

                    b.Property<bool>("CA125")
                        .HasColumnType("bit");

                    b.Property<bool>("CA153")
                        .HasColumnType("bit");

                    b.Property<bool>("CA199")
                        .HasColumnType("bit");

                    b.Property<bool>("CEA")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("CancerMarkers");
                });

            modelBuilder.Entity("API.Model.CardiacMarker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("CKMB")
                        .HasColumnType("bit");

                    b.Property<bool>("DDimer")
                        .HasColumnType("bit");

                    b.Property<bool>("TroponinT")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("CardiacMarkers");
                });

            modelBuilder.Entity("API.Model.ClinicRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("PatientDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClinicRequests");
                });

            modelBuilder.Entity("API.Model.Coagulation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("APTT")
                        .HasColumnType("bit");

                    b.Property<bool>("INR")
                        .HasColumnType("bit");

                    b.Property<bool>("PT")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Coagulations");
                });

            modelBuilder.Entity("API.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("API.Model.Electrolyte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("Calcium")
                        .HasColumnType("bit");

                    b.Property<bool>("Chloride")
                        .HasColumnType("bit");

                    b.Property<bool>("Magnesium")
                        .HasColumnType("bit");

                    b.Property<bool>("Phosphorus")
                        .HasColumnType("bit");

                    b.Property<bool>("Potassium")
                        .HasColumnType("bit");

                    b.Property<bool>("Sodium")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Electrolytes");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("PatientDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("age")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("API.Model.Examiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("ExaminerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("RegExaminerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RegExaminerId");

                    b.ToTable("Examiners", (string)null);
                });

            modelBuilder.Entity("API.Model.Hematology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BloodFilm")
                        .HasColumnType("bit");

                    b.Property<bool>("Bloodgroup")
                        .HasColumnType("bit");

                    b.Property<bool>("CBC")
                        .HasColumnType("bit");

                    b.Property<bool>("ESR")
                        .HasColumnType("bit");

                    b.Property<bool>("Hba1c")
                        .HasColumnType("bit");

                    b.Property<bool>("Hgb")
                        .HasColumnType("bit");

                    b.Property<bool>("MalariaByAgCard")
                        .HasColumnType("bit");

                    b.Property<bool>("Periferialmorphology")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Hematologies");
                });

            modelBuilder.Entity("API.Model.Hormone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("FSH")
                        .HasColumnType("bit");

                    b.Property<bool>("FreeT3")
                        .HasColumnType("bit");

                    b.Property<bool>("FreeT4")
                        .HasColumnType("bit");

                    b.Property<bool>("LH")
                        .HasColumnType("bit");

                    b.Property<bool>("PSA")
                        .HasColumnType("bit");

                    b.Property<bool>("Prolactin")
                        .HasColumnType("bit");

                    b.Property<bool>("TSH")
                        .HasColumnType("bit");

                    b.Property<bool>("TotalBetaHCGT3")
                        .HasColumnType("bit");

                    b.Property<bool>("TotalT3")
                        .HasColumnType("bit");

                    b.Property<bool>("TotalT4")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Hormones");
                });

            modelBuilder.Entity("API.Model.ICD10Codes2024", b =>
                {
                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SHORT DESCRIPTION");

                    b.ToTable("ICD10Codes2024", (string)null);
                });

            modelBuilder.Entity("API.Model.LabBloodFilmTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consistency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Selectionone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("BloodFilmTests");
                });

            modelBuilder.Entity("API.Model.LaboratoryRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BacteriologyId")
                        .HasColumnType("int");

                    b.Property<int?>("BiochemistryId")
                        .HasColumnType("int");

                    b.Property<int?>("CancerMarkerid")
                        .HasColumnType("int");

                    b.Property<int?>("CardiacMarkerid")
                        .HasColumnType("int");

                    b.Property<int?>("Coagulationid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Electrolyteid")
                        .HasColumnType("int");

                    b.Property<int?>("HematologyId")
                        .HasColumnType("int");

                    b.Property<int?>("Hormoneid")
                        .HasColumnType("int");

                    b.Property<bool>("IsBacteriologyChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBiochemistryChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancerMarkerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardiacMarkerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoagulationChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElectrolyteChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHematologyChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHormoneChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherLabChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParasitologyChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSerologyChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrinalysisChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("OtherLabid")
                        .HasColumnType("int");

                    b.Property<int?>("ParasitologyId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("SerologyId")
                        .HasColumnType("int");

                    b.Property<string>("hospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BacteriologyId");

                    b.HasIndex("BiochemistryId");

                    b.HasIndex("CancerMarkerid");

                    b.HasIndex("CardiacMarkerid");

                    b.HasIndex("Coagulationid");

                    b.HasIndex("Electrolyteid");

                    b.HasIndex("HematologyId");

                    b.HasIndex("Hormoneid");

                    b.HasIndex("OtherLabid");

                    b.HasIndex("ParasitologyId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SerologyId");

                    b.ToTable("LaboratoryRequests");
                });

            modelBuilder.Entity("API.Model.LaboratorySubTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaboratoryTestResultId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryTestResultId");

                    b.ToTable("LaboratorySubTestResult");
                });

            modelBuilder.Entity("API.Model.LaboratoryTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPregnant")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LaboratoryTestResult");
                });

            modelBuilder.Entity("API.Model.OtherLab", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("VitB12e")
                        .HasColumnType("bit");

                    b.Property<bool>("VitD")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("OtherLabs");
                });

            modelBuilder.Entity("API.Model.Parasitology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("StoolDirect")
                        .HasColumnType("bit");

                    b.Property<bool>("Urinalysis")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Parasitologies");
                });

            modelBuilder.Entity("API.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("age")
                        .HasColumnType("int");

                    b.Property<DateTime>("assigneddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("API.Model.PhysicalAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abdomen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenitoUninary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glands")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HEENT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MusculoSkeleton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Skin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhysicalAssessments");
                });

            modelBuilder.Entity("API.Model.PhysicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abdomen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cardiovascular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralAppearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadAndNeck")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Respiratory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSigns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhysicalExaminations");
                });

            modelBuilder.Entity("API.Model.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clinicalfinding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExaminerId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestigationResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReferralDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rxgiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminerId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("API.Model.RegExaminer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegExaminers");
                });

            modelBuilder.Entity("API.Model.Serology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ASO")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("CRP")
                        .HasColumnType("bit");

                    b.Property<bool>("FOB")
                        .HasColumnType("bit");

                    b.Property<bool>("HBsAb")
                        .HasColumnType("bit");

                    b.Property<bool>("HBsAg")
                        .HasColumnType("bit");

                    b.Property<bool>("HCG")
                        .HasColumnType("bit");

                    b.Property<bool>("HIV")
                        .HasColumnType("bit");

                    b.Property<bool>("HPyloriAb")
                        .HasColumnType("bit");

                    b.Property<bool>("HPyloriAgStool")
                        .HasColumnType("bit");

                    b.Property<bool>("HepatitisBViralLoad")
                        .HasColumnType("bit");

                    b.Property<bool>("HepatitisCViralLoad")
                        .HasColumnType("bit");

                    b.Property<bool>("RF")
                        .HasColumnType("bit");

                    b.Property<bool>("VDRL")
                        .HasColumnType("bit");

                    b.Property<bool>("WeilFelix")
                        .HasColumnType("bit");

                    b.Property<bool>("Widal")
                        .HasColumnType("bit");

                    b.Property<bool>("XMatch")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Serologies");
                });

            modelBuilder.Entity("API.Model.SickLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("API.Model.Urinalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acetone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Blood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpthCell")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glucose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Granular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HCG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hyaline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protein")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RbcMicroscopicCasts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpGr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urobilin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urobilinogen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WbcMicroscopicCasts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Urinalyses");
                });

            modelBuilder.Entity("API.Model.UrineDipsticksTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bilirubin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BilirubinIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodHemoglobin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodHemoglobinIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glucose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlucoseIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ketones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KetonesIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeukocyteEsterase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeukocyteEsteraseIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nitrite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NitriteIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PH")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Protein")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProteinIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SpecificGravity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Urobilinogen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrobilinogenIntensity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UrineDipsticksTests");
                });

            modelBuilder.Entity("API.Model.Witness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccidentReportId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccidentReportId");

                    b.ToTable("Witnesses");
                });

            modelBuilder.Entity("API.Models.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInpatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutpatient")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("PrescriptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovedQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("StockAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("StockId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("API.Model.AccidentReport", b =>
                {
                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Model.Appointment", b =>
                {
                    b.HasOne("API.Model.Examiner", "Examiner")
                        .WithMany()
                        .HasForeignKey("ExaminerId");

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("API.Model.Assignment", b =>
                {
                    b.HasOne("API.Model.Doctor", null)
                        .WithMany("Assignments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany("Assignments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Model.Examiner", b =>
                {
                    b.HasOne("API.Model.Assignment", "Assignment")
                        .WithMany("Examiners")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("API.Model.Doctor", null)
                        .WithMany("Examiners")
                        .HasForeignKey("DoctorId");

                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany("Examiners")
                        .HasForeignKey("PatientId");

                    b.HasOne("API.Model.RegExaminer", null)
                        .WithMany("Examiners")
                        .HasForeignKey("RegExaminerId");

                    b.Navigation("Assignment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Model.LabBloodFilmTest", b =>
                {
                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Model.LaboratoryRequest", b =>
                {
                    b.HasOne("API.Model.Bacteriology", "Bacteriology")
                        .WithMany()
                        .HasForeignKey("BacteriologyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.Biochemistry", "Biochemistry")
                        .WithMany()
                        .HasForeignKey("BiochemistryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.CancerMarker", "CancerMarker")
                        .WithMany()
                        .HasForeignKey("CancerMarkerid");

                    b.HasOne("API.Model.CardiacMarker", "CardiacMarker")
                        .WithMany()
                        .HasForeignKey("CardiacMarkerid");

                    b.HasOne("API.Model.Coagulation", "Coagulation")
                        .WithMany()
                        .HasForeignKey("Coagulationid");

                    b.HasOne("API.Model.Electrolyte", "Electrolyte")
                        .WithMany()
                        .HasForeignKey("Electrolyteid");

                    b.HasOne("API.Model.Hematology", "Hematology")
                        .WithMany()
                        .HasForeignKey("HematologyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.Hormone", "Hormone")
                        .WithMany()
                        .HasForeignKey("Hormoneid");

                    b.HasOne("API.Model.OtherLab", "OtherLab")
                        .WithMany()
                        .HasForeignKey("OtherLabid");

                    b.HasOne("API.Model.Parasitology", "Parasitology")
                        .WithMany()
                        .HasForeignKey("ParasitologyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.Patient", "Patients")
                        .WithMany("LaboratoryRequests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Serology", "Serology")
                        .WithMany()
                        .HasForeignKey("SerologyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bacteriology");

                    b.Navigation("Biochemistry");

                    b.Navigation("CancerMarker");

                    b.Navigation("CardiacMarker");

                    b.Navigation("Coagulation");

                    b.Navigation("Electrolyte");

                    b.Navigation("Hematology");

                    b.Navigation("Hormone");

                    b.Navigation("OtherLab");

                    b.Navigation("Parasitology");

                    b.Navigation("Patients");

                    b.Navigation("Serology");
                });

            modelBuilder.Entity("API.Model.LaboratorySubTestResult", b =>
                {
                    b.HasOne("API.Model.LaboratoryTestResult", "LaboratoryTestResult")
                        .WithMany("SubTests")
                        .HasForeignKey("LaboratoryTestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboratoryTestResult");
                });

            modelBuilder.Entity("API.Model.Patient", b =>
                {
                    b.HasOne("API.Model.Doctor", null)
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("API.Model.Referral", b =>
                {
                    b.HasOne("API.Model.Examiner", "Examiner")
                        .WithMany()
                        .HasForeignKey("ExaminerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("API.Model.SickLeave", b =>
                {
                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany("SickLeaves")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Model.Witness", b =>
                {
                    b.HasOne("API.Model.AccidentReport", "AccidentReport")
                        .WithMany("Witnesses")
                        .HasForeignKey("AccidentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccidentReport");
                });

            modelBuilder.Entity("Prescription", b =>
                {
                    b.HasOne("API.Model.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PrescriptionItem", b =>
                {
                    b.HasOne("Prescription", "Prescription")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("API.Model.AccidentReport", b =>
                {
                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("API.Model.Assignment", b =>
                {
                    b.Navigation("Examiners");
                });

            modelBuilder.Entity("API.Model.Doctor", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Examiners");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("API.Model.LaboratoryTestResult", b =>
                {
                    b.Navigation("SubTests");
                });

            modelBuilder.Entity("API.Model.Patient", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Examiners");

                    b.Navigation("LaboratoryRequests");

                    b.Navigation("Prescriptions");

                    b.Navigation("SickLeaves");
                });

            modelBuilder.Entity("API.Model.RegExaminer", b =>
                {
                    b.Navigation("Examiners");
                });

            modelBuilder.Entity("Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
